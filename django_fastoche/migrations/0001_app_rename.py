# Generated by Django 3.2.5 on 2021-12-09 15:52

from django.db import migrations, models

class Migration(migrations.Migration):

    initial = True

    dependencies = []

    def getSQLRename(name_from, name_to):
        # "UPDATE django_content_type SET model='config' WHERE app_label='%s' and model='wagtailfastocheconfig';" % (name_to + '')
        # "ALTER TABLE IF EXISTS '%s' RENAME TO '%s';" % (name_to + '_wagtailfastocheconfig', name_to + '_config')
        # "ALTER SEQUENCE IF EXISTS '%s' RENAME TO '%s';" % (name_to + '_wagtailfastocheconfig_id_seq', name_to + '_config_id_seq')
        sql_query = (
            "UPDATE django_content_type SET app_label='{}' WHERE app_label='{}';".format(name_to, name_from),
            "ALTER TABLE IF EXISTS  {}_cfranconfig RENAME TO {}_{}config;".format(
                name_from, name_to, "fastoche"
            ),
            "ALTER TABLE IF EXISTS  {}_cfransocialmedia RENAME TO {}_{}socialmedia;".format(
                name_from, name_to, "fastoche"
            ),
            "ALTER SEQUENCE IF EXISTS  {}_cfranconfig_id_seq RENAME TO {}_{}config_id_seq;".format(
                name_from, name_to, name_to.replace("_", "")
            ),
            "ALTER SEQUENCE IF EXISTS  {}_cfransocialmedia_id_seq RENAME TO {}_{}socialmediaid_seq;".format(
                name_from, name_to, "fastoche"
            ),
            "UPDATE django_migrations SET app='{}' WHERE app='{}';".format(name_to, name_from),
            "UPDATE django_migrations SET name = replace(name,'{}','{}') WHERE app ='{}';".format(
                name_from.replace("_", ""), name_to.replace("_", ""), name_to
            ),
        )
        return sql_query


    db_cursor = connection.cursor()
    db_cursor.execute("SELECT relname FROM pg_class WHERE relname='django_cfran_cfranconfig';")
    result = bool(db_cursor.fetchone())

    if result: 
        sql_query = getSQLRename("django_cfran", "django_fastoche") 
        reverse_sql_query = getSQLRename("django_fastoche", "django_cfran") 
        operations = [
            migrations.RunSQL(sql=sql_query, reverse_sql=reverse_sql_query),
        ]
    else:
        operations = []